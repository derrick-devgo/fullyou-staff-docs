openapi: 3.0.2
servers:
  - url: /v3
info:
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  version: 1.0.17
  title: Swagger Petstore - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: breakingNews
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: questionnaire
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: contactBooks
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: student
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: orderRecord
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
  - name: user
    description: Operations about user
paths:
  /breakingNews:
    get:
      tags:
        - breakingNews
      summary: 最新消息列表
      description: 根據類型與狀態選擇最新消息列表
      operationId: findPetsByStatus
      parameters:
        - name: type
          in: query
          description: 一般、重要、繳費、家長留言板
          required: false
          explode: true
          schema:
            type: string
            enum:
              - general
              - important
              - payment
              - board
            default: available
        - name: status
          in: query
          description: 已發佈、預約發佈
          required: false
          explode: true
          schema:
            type: string
            enum:
              - published
              - scheduled
            default: available
        - name: orderBy
          in: query
          description: “asc” or “desc”,固定用日期排序
          required: false
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreakingNews'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /breakingNews/{newsId}:
    get:
      tags:
        - breaking_news
      summary: 最新消息內頁資料
      x-swagger-router-controller: OrderController
      description: 最新消息內頁資料
      operationId: getOrderById
      parameters:
        - name: newsId
          in: path
          description: 最新消息ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakingNewsDetail'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - breaking_news
      summary: Delete purchase order by ID
      x-swagger-router-controller: OrderController
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /questionnaires:
    get:
      tags:
        - questionnaire
      summary: 根據狀態取得問卷
      x-swagger-router-controller: OrderController
      description: For valid response try integer IDs with value less than 5 or > 10. Other values
        will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: status
          in: query
          description: 已發佈、預約發佈
          required: false
          explode: true
          schema:
            type: string
            enum:
              - ongoing
              - completed
              - scheduled
            default: available
        - name: orderBy
          in: query
          description: “asc” or “desc”,固定用日期排序
          required: false
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Questionnaire'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /questionnaires/{questionnaireId}:
    get:
      tags:
        - questionnaire
      summary: 問卷內頁
      x-swagger-router-controller: OrderController
      description: For valid response try integer IDs with value less than 5 or > 10. Other values
        will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: questionnaireId
          in: path
          description: 問卷ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionnaireDetail'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /contactBooks:
    get:
      tags:
        - contact_books
      summary: 根據班別與日期獲取聯絡簿列表
      description: 根據班別與日期獲取聯絡簿列表
      operationId: findPetsByStatus
      parameters:
        - name: date
          in: query
          description: "想要查詢的日期 (YYYY-MM-DD)"
          required: true
          schema:
            type: string
            format: date
        - name: crClass_id
          in: query
          description: "班別ID"
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactBook'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /contactBooks/{contactBookId}:
    get:
      tags:
        - contact_books
      summary: 聯絡簿內頁
      description: 聯絡簿內頁
      operationId: findPetsByStatus
      parameters:
        - name: contactBook_id
          in: path
          description: 聯絡簿ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactBookDetail'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /schools/{schoolId}/rosters/{rosterId}:
    get:
      tags:
        - attendance
      summary: 根據參數獲取待點名清單
      description: 根據學校ID、星期、時段等參數取得點名表
      operationId: findPetsByStatus
      parameters:
        - name: schoolId
          in: path
          description: 學校ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: rosterId
          in: path
          description: 點名單ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roster'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /branches/{branchId}/classTypes/{classTypeId}/rosters/{rosterId}:
    get:
      tags:
        - attendance
      summary: 根據分校、班別取得點名表
      description: 根據分校、班別取得點名表
      operationId: findPetsByStatus
      parameters:
        - name: branchId
          in: path
          description: 分校ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: classTypeId
          in: path
          description: 班別ID
          required: true
          explode: true
          schema:
            type: string
            enum:
              - school
              - center
            default: center
        - name: crClass_id
          in: query
          description: 班別ID
          required: true
          explode: true
          schema:
            type: string
            enum:
              - school
              - center
            default: center
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roster'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /branches/{branchId}/classes/{classId}/classTypes/{classTypeId}/students:
    get:
      tags:
        - student
      summary: 根據分校、班級、班別等參數取得學生列表
      description: 根據分校、班級、班別等參數取得點名表
      operationId: findPetsByStatus
      parameters:
        - name: branchId
          in: path
          description: 分校ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: classId
          in: path
          description: 班級ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: classTypeId
          in: query
          description: 班別ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roster'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /branches/{branchId}/classes/{classId}/classTypes/{classTypeId}/students/{studentId}:
    get:
      tags:
        - student
      summary: 取得特定學生資料
      description: 根據分校、班級、班別等參數取得特定學生資料
      operationId: findPetsByStatus
      parameters:
        - name: branchId
          in: path
          description: 分校ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: classId
          in: path
          description: 班級ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: classTypeId
          in: path
          description: 班別ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: studentId
          in: path
          description: 學生ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roster'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /branches/{branchId}/classes/{classId}/classTypes/{classTypesId}/orderRecords:
    get:
      tags:
        - orderRecord
      summary: 取得訂餐紀錄
      description: 根據分校、班級、班別取得訂餐紀錄列表
      operationId: getInventory
      x-swagger-router-controller: OrderController
      parameters:
        - name: branchId
          in: path
          description: 分校ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: classId
          in: path
          description: 班級ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: date
          in: query
          description: "想要查詢的日期 (YYYY-MM-DD)"
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /branches/{branchId}/classes/{classId}/classTypes/{classTypesId}/orderRecords/{recordId}:
    get:
      tags:
        - orderRecord
      summary: 取得特定訂餐紀錄
      description: 取得特定訂餐紀錄
      operationId: getInventory
      x-swagger-router-controller: OrderController
      parameters:
        - name: branchId
          in: path
          description: 分校ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
        - name: classId
          in: path
          description: 班級ID
          required: true
          explode: true
          schema:
            type: integer
            format: int64
            default: center
        - name: date
          in: query
          description: "想要查詢的日期(YYYY-MM-DD)"
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: [ ]
  /store/order/v1:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      x-swagger-router-controller: OrderController
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
  /store/order/v2:
    post:
      tags:
        - store
      summary: Place an order for a pet (v2)
      description: Place a new order in the store with v2 endpoint
      operationId: placeOrderV2
      x-swagger-router-controller: OrderController
      responses:
        '201':
          description: Order successfully placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
        '405':
          description: Invalid input
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      x-swagger-router-controller: OrderController
      description: For valid response try integer IDs with value less than 5 or > 10. Other values
        will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      x-swagger-router-controller: OrderController
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
  /user/createWithList:
    post:
      tags:
        - user
      summary: Create list of users with given input array
      description: 'Creates list of users with given input array'
      x-swagger-router-controller: UserController
      operationId: createUsersWithListInput
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Log user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Log current user out
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      x-swagger-router-controller: UserController
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that needs to be updated
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    BreakingNews:
      x-swagger-router-model: io.swagger.petstore.model.Order
      properties:
        breaking_news_id:
          type: integer
          format: int64
          example: 10
        type_id:
          type: integer
          format: int64
          example: 2
        type_name:
          type: string
          description: Order Status
          enum:
            - 一般
            - 繳費
            - 重要
            - 家長留言板
          example: 重要
        is_pinned:
          type: boolean
          description: 是否被置頂，被置頂的消息再用日期排序
        title:
          type: string
          example: 下週課程時間安排通知
        published_time:
          type: string
          format: date-time
      xml:
        name: order
      type: object
    BreakingNewsDetail:
      x-swagger-router-model: io.swagger.petstore.model.Order
      properties:
        breaking_news_id:
          type: integer
          format: int64
          example: 10
        type_id:
          type: integer
          format: int64
          example: 2
        type_name:
          type: string
          description: Order Status
          enum:
            - 一般
            - 繳費
            - 重要
            - 家長留言板
          example: 重要
        is_pinned:
          type: boolean
          description: 是否被置頂，被置頂的消息再用日期排序
        title:
          type: string
          example: 下週課程時間安排通知
        published_time:
          type: string
          format: date-time
        content:
          type: string
          example: 親愛的家長，您好：感謝您對本補習班的支持！以下是下週的課程安排： 日期：MM月DD日（週X） 時間：XX:XX - XX:XX 地點：XXX教室 如有任何問題或需要調整，請於 MM月DD日 前與我們聯繫，謝謝！
        boards:
          type: array
          items:
            $ref: '#/components/schemas/Message'
      xml:
        name: order
      type: object
    Message:
      properties:
        message_id:
          type: integer
          format: int64
          example: 20
        role:
          type: integer
          format: int64
          example: 0
          description: 0:老師 1:家長
        message:
          type: string
          example: 親愛的老師，您好：由於家庭出遊等，我的孩子無法參加課程
        reply:
          type: array
          items:
            $ref: '#/components/schemas/MessageReply'
      xml:
        name: customer
      type: object
    MessageReply:
      properties:
        message_id:
          type: integer
          format: int64
          example: 20
        replay_id:
          type: integer
          format: int64
          example: 2
        reply_message:
          type: string
          example: 好的，沒問題
      xml:
        name: customer
      type: object
    Questionnaire:
      x-swagger-router-model: io.swagger.petstore.model.Order
      properties:
        questionnaire_id:
          type: integer
          format: int64
          example: 10
        status:
          type: integer
          description: 問卷狀態 0:進行中 1:已結束 2:預約發佈
          example: 0
        title:
          type: string
          example: 問卷主旨標題
        published_time:
          type: string
          format: date-time
        due_time:
          type: string
          format: date-time
        visibility:
          type: integer
          format: 1
        unreplied:
          type: integer
          example: 20
          description: 尚未回覆人數
      xml:
        name: order
      type: object
    QuestionnaireDetail:
      x-swagger-router-model: io.swagger.petstore.model.Order
      type: object
      properties:
        questionnaire_id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: 問卷主旨標題
        published_time:
          type: string
          format: date-time
        due_time:
          type: string
          format: date-time
        visibility:
          type: integer
          format: 1
        unreplied:
          type: integer
          example: 20
          description: 尚未回覆人數
        unreplied_list:
          type: array
          description: 尚未回覆列表
          items:
            type: string
      xml:
        name: order
    ContactBook:
      x-swagger-router-model: io.swagger.petstore.model.Order
      properties:
        CB_id:
          type: integer
          format: int64
          example: 10
      xml:
        name: order
      type: object
    ContactBookDetail:
      x-swagger-router-model: io.swagger.petstore.model.Order
      type: object
      properties:
        CB_id:
          type: integer
          format: int64
          example: 10
        CB_date:
          type: string
          format: date
          example: "2025-01-13"
        class_name:
          type: string
          example: 班級名稱
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
      xml:
        name: order
    File:
      properties:
        file_id:
          type: integer
          format: int64
          example: 20
        file_name:
          type: string
          example: 1/10數學上課講義
        file_url:
          type: string
          description: 文件下載連結
        is_img:
          type: bool
        size:
          type: string
          example: 17.2MB
      xml:
        name: customer
      type: object
    Customer:
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          xml:
            wrapped: true
            name: addresses
      xml:
        name: customer
      type: object
    Address:
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: 94301
      xml:
        name: address
      type: object
    Category:
      x-swagger-router-model: io.swagger.petstore.model.Category
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
      type: object
    User:
      x-swagger-router-model: io.swagger.petstore.model.User
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
        phone:
          type: string
          example: 12345
        userStatus:
          type: integer
          format: int32
          example: 1
          description: User Status
      xml:
        name: user
      type: object
    Tag:
      x-swagger-router-model: io.swagger.petstore.model.Tag
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
      type: object
    Pet:
      x-swagger-router-model: io.swagger.petstore.model.Pet
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
            xml:
              name: tag
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
      type: object
    ApiResponse:
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
      type: object
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        details:
          type: array
          items:
            type: object
            properties:
              typeUrl:
                type: string
              value:
                type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
